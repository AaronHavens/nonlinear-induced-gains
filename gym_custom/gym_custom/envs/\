import gym
from gym import spaces
from gym.utils import seeding
import numpy as np
from os import path
import scipy.integrate as integrate

from .dynamic_uncertainty import flex_pend_dxdt, rigid_pend_dxdt

class FlexRotPendulumEnv(gym.Env):
    metadata = {
        'render.modes' : ['human', 'rgb_array'],
        'video.frames_per_second' : 30
    }

    def __init__(self, flex=False):
        self.max_speed=8
        self.max_torque=10.
        self.dt=.1
        self.viewer = None

        high = np.array([1, 1, self.max_speed])
        self.action_space = spaces.Box(low=-self.max_torque, high=self.max_torque, shape=(1,), dtype=np.float32)
        self.observation_space = spaces.Box(low=-high, high=high, dtype=np.float32)
        self.flex = flex
        self.mb = 1.0
        self.mt = 1
        self.L = 10.0
        self.rho = 0.1
        self.r = 1e-2
        self.E = 200e9
        self.I = (np.pi/4) * self.r**4
        self.EI = self.E*self.I
        self.Mr = self.mb + self.mt + self.rho * self.L
        self.damp = 0.0
        self.g = 10
        if self.flex: 
            self.dxdt = flex_pend_dxdt(self.E, self.I, self.mt, self.g, self.L, self.damp)
            self._get_obs = self.flex_obs 
        else:
            self.dxdt = rigid_pend_dxdt(self.mt, self.g, self.L)
            self._get_obs = self.rigid_obs

        self.seed()

    def seed(self, seed=None):
        self.np_random, seed = seeding.np_random(seed)
        return [seed]
    
   
    def step(self,u):
        done = False
        x = np.copy(self.state)
        dt = self.dt
        
        #u = np.clip(u, -self.max_torque, self.max_torque)[0]
        self.last_u = u # for rendering
       
        x_augmented = np.append(x, u)
        
        y_next = integrate.solve_ivp(self.dxdt, [0, self.dt], x_augmented)
        y = np.array(y_next.y)
        x = y[:-1,-1]
        #x = [y_next.y[0][-1], y_next.y[1][-1], y_next.y[2][-1], y_next.y[3][-1]]
        x_ = np.copy(self.state)
        z_ = np.copy(self._get_obs())
        costs = 0.001 * u**2 + angle_normalize(x_[0]) + .1*z_[2]**2
        costs = costs[0]
        self.state = x
        
        return self._get_obs(), -costs, done, {}

    def reset(self):
        theta = self.np_random.uniform(-np.pi, np.pi)
        theta_dot = self.np_random.uniform(-1,1)
        if self.flex:
            self.state = np.array([theta,0,theta_dot,0])
        else:
            self.state = np.array([theta, theta_dot])

        self.last_u = None
        return self._get_obs()

    def flex_obs(self):
        z = np.copy(self.state)
        x = np.cos(z[0])*self.L - np.sin(z[0]) * z[1]
        y = np.sin(z[0])*self.L + np.cos(z[0]) * z[1]
        v = z[2] # only observe angular velocity at base
        #v = (self.L * z[2] + z[3])**2 + (z[2] * z[1])**2
        return np.array([x,y,v])
    
    def rigid_obs(self):
        z = np.copy(self.state)
        x = np.cos(z[0])*self.L
        y = np.sin(z[0])*self.L
        v = z[1]
        return np.array([x,y,v])


    def render(self, mode='human'):
        return 0
    
    def get_obs(self):
        return self._get_obs()
def angle_normalize(x):
    return (x) % (2*np.pi)
